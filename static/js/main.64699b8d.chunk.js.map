{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/NavBar/NavBar.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","cn","NavBar","role","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","slug","name","sex","isWomen","PeopleTable","people","selectedSlug","length","peopleWithParents","map","human","mother","find","person","motherName","father","fatherName","born","died","isSelected","editedMotherName","editedFatherName","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasError","setHasError","useParams","fetchPeople","allPeople","console","warn","useEffect","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.64699b8d.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: React.FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => (\n      cn('navbar-item', { 'has-background-grey-lighter': isActive })\n    )}\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from '../PageNavLink';\n\nexport const NavBar: React.FC = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n        <PageNavLink to=\"/people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n  slug: string;\n  name: string;\n  sex?: string;\n};\n\nexport const PersonLink: React.FC<Props> = ({ slug, name, sex = 'm' }) => {\n  const isWomen = sex === 'f';\n\n  return (\n    <Link to={`../${slug}`} className={cn({ 'has-text-danger': isWomen })}>\n      {name}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  people: Person[];\n  selectedSlug: string;\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, selectedSlug }) => {\n  if (people.length === 0) {\n    return (\n      <p data-cy=\"noPeopleMessage\">\n        There are no people on the server\n      </p>\n    );\n  }\n\n  const peopleWithParents = people.map(human => ({\n    ...human,\n    mother: people.find(person => person.name === human.motherName) || null,\n    father: people.find(person => person.name === human.fatherName) || null,\n  }));\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {peopleWithParents.map(person => {\n          const {\n            name,\n            sex,\n            born,\n            died,\n            slug,\n            motherName,\n            fatherName,\n            mother,\n            father,\n          } = person;\n\n          const isSelected = selectedSlug === slug;\n          const editedMotherName = motherName || '-';\n          const editedFatherName = fatherName || '-';\n\n          return (\n            <tr\n              data-cy=\"person\"\n              className={cn({ 'has-background-warning': isSelected })}\n            >\n              <td>\n                <PersonLink\n                  slug={slug}\n                  name={name}\n                  sex={sex}\n                />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>\n                {mother\n                  ? (\n                    <PersonLink\n                      slug={mother.slug}\n                      name={editedMotherName}\n                      sex={mother.sex}\n                    />\n                  )\n                  : editedMotherName}\n              </td>\n              <td>\n                {father\n                  ? <PersonLink slug={father.slug} name={editedFatherName} />\n                  : editedFatherName}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable no-console */\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const { slug = '' } = useParams();\n\n  const fetchPeople = async () => {\n    setIsLoading(true);\n\n    try {\n      const allPeople = await getPeople();\n\n      await setPeople(allPeople);\n    } catch {\n      console.warn('An occur error while loading people');\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  return (\n    <div className=\"block\">\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"box table-container\">\n        {isLoading && <Loader />}\n\n        {people && <PeopleTable people={people} selectedSlug={slug} />}\n\n        {hasError && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n\n          <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}